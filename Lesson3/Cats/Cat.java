/*Введение в объектно-ориентированное программирование (ООП)

Что это такое? Это методология программирования, основанная на представлении
программы в виде взаимодействующих объектов, каждый из которых является
экземпляром какого-либо класса

Класс - структура данных, хранящая параметры будущего объекта (какие-то переменные),
а также функции, благодаря которым мы можем взаимодействовать с объектом.
Это своего рода конструктор, который позволяет в будущем собрать готовый объект.
 */

public class Cat{
    private String name; //пример перемеменной (параметра) класса Cat - имя будущего кота
    private int age; //переменная, отвечающая за возраст кота
    private String color; //переменная, отвечающая за цвет кота
    private static int sleephours = 10; //статическая переменная, которая говорит о том, что все
    //                                  коты, созданные с помощью этого класса, должны спать 10 часов.
    //                                  Про static подробнее написано ниже

    /*
    Теперь немного о модификаторах доступа. Всего их 4 типа: default, public, private, protected.
    Они позволяют указать область видимости поля какого-либо класса. Поле - переменные и методы (функции)
    (просто это их такое общее название).

    default: устанавливается, когда при объявлении переменной или метода мы не пишем никакого модификатора.
    Показывает, что поле будет видимо во всех классах данного проекта (пакета).

    public: устанавливается с помощью соответствующего ключевого слова public. Показывает, что
    поле с таким модификатором доступа будет видимо во всех классах данного проекта и в других проектах
    (в данном пакете и в других пакетах)

    private: устанавливается с помощью соответствующего ключевого слова private. Показывает, что
    поле с таким модификатором доступа будет видимо только в том классе, где оно объявлено и нигде больше
    (другие классы и проекты не могут его использовать). Это реализует один из принципов ООП - инкапсуляцию -
    сокрытие некоторых данных для нормальной работы класса и защиты от случайных изменений

    protected: устанавливается с помощью соответствующего ключевого слова protected. Показывает, что
    поле с таким модификатором доступа будет видимо во всех классах данного проекта и в дочерних классах
    (которые наследуют этот класс). Об этом поговорим на следующем занятии.

    В объявлении класса не может быть модификаторов доступа private и protected.
     */
    /*
    Обычно переменные класса помечаются как private, чтобы пользователь или другой программист
    не мог случайным образом поменять какую-то переменную и нарушить работу класса.
     */
    /*
    Конструктор класса - элемент класса, инициализирующий наш объект. При создании объекта
    заполняет переменные какими-нибудь значениями по умолчанию и вызывает какие-нибудь функции.
     */
    public Cat(){
        this.name = "Barsik"; //this - указатель на то, что мы используем именно переменную класса
        //                             (которая вверху написана)
        this.age = 5;
        this.color = "grey";
    }
    /*
    Конструктор с параметрами - позволяет создать объект с какими-нибудь данными, введёнными пользователем.
    Предыдущий конструктор называется конструктором по умолчанию.

    Также конструкторов в классе может быть несколько с разными параметрами, это называется
    перегрузкой конструктора.

    Конструктор должен называться так же, как и класс.

    Конструктор может использовать модификатор private, но тогда мы
    не сможем создать объект этого класса.

    Также конструктора может и не быть, но при создании объекта компилятор предоставит
    нам конструктор, заполняющий всё нулями или null
    */
    public Cat(String name, int age, String color){
        this.name = name; /* с помощью this мы показываем, что переменной класса name мы присваиваем
                            значение name, которое задаётся пользователем. В среде разработки
                            они подсвечиваются разным цветом для отличия.
        */
        this.age = age;
        this.color = color;
    }
    public String getName(){ //получаем имя кота
        return name;
    }
    public int getAge(){ //получаем возраст кота
        return age;
    }
    public String getColor(){ //получаем цвет кота
        return color;
    }
    public void setName(String name){ //устанавливаем имя кота, this работает как в конструктора
        //                              возвращать ничего не нужно, делаем void
        this.name = name;
    }
    public void setAge(int age){ //устанавливаем возраст кота, this работает как в конструкторе
        this.age = age;
    }
    public void setColor(String color){ //устанавливаем цвет кота, this работает как в конструкторе
        this.color = color;
    }

    /*
    Теперь про модификатор static. Он обозначает, что поле, отмеченное static, будет общим для всех
    создаваемых объектов класса.

    Обычно он используется для каких-то общих переменных или
    вспомогательных методов.

    В данном примере переменная sleephours объявлена как static,
    это показывает, что все коты, которых мы будем создавать, будут спать по 10 часов.

    И ещё один супер важный момент. В статическом методе не могут использоваться нестатические
    поля (не отмеченные как static).
     */

    /*
    Как правильно создавать объекты и использовать поля классов написано в классе Main
     */
    public static int getSleephours(){
        return sleephours;
    }
}
