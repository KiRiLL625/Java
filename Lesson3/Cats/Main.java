public class Main {
    public static void main(String[] args) {
        /*
        Как создавать объекты (экземпляры классов):

        ClassName variableName = new ClassName(parameters);

        Вначале пишем имя класса, затем название переменной, где будет лежать объект,
        затем, после знака равно, ключевое слово new, потом имя класса и в скобках
        параметры конструктора класса

        Фактически справа, после new, находится конструктор класса

        Объекты можно создавать и без переменной, но тогда они будут "одноразовыми"
        и работа с ними будет минимальной. Иногда это нужно, но об этом позже
        */
        /*
        Как обращаться к переменным и методам класса:

        К нестатическим (не отмеченным как static)
        classObj.methodName(parameters);

        classObj - название объекта, который мы создали
        methodName - я думаю, понятно, что это название метода

        classObj.variableName; - получаем переменную объекта класса classObj

        К статическим:

        ClassName.methodName(parameters);

        ClassName - имя класса, где находится статический метод
        methodName - название статического метода

        ClassName.variableName;

        ClassName - имя класса, где находится статический метод
        variableName - название статической переменной

        Главное отличие статических полей от нестатических это то, что
        мы можем к ним обратиться, не создавая экземпляр класса. То есть
        мы можем просто написать имя класса, поставить точку и написать имя
        метода или переменной класса и может спокойно ими пользоваться.

        Для обращения к нестатическим полям мы должны создавать экземпляр класса (объект).

        Ниже примеры ->
        */
        Cat cat_1 = new Cat(); /* создаём первого кота со значениями по умолчанию
        его имя будет Барсик, возраст - 5, цвет - серый, как написано в конструкторе
        */
        System.out.println(cat_1.name + " " + cat_1.age + " " + cat_1.color);
        //print сверху вывел бы: Barsik 5 grey
        //но он выведет ошибку, если name, age, color в классе Cat имеют модификатор private
        //тогда нужно использовать функции getName, getAge, getColor
        Cat cat_2 = new Cat("Myrka", 7, "black"); /* создаём
        второго кота с пользовательскими параметрами
        */
        System.out.println(cat_2.name + " " + cat_2.age + " " + cat_2.color);
        //print сверху выведет: Myrka 7 black
        //также выведет ошибку, если name, age, color в классе Cat имеют модификатор private
        Cat cat_3 = new Cat();
        System.out.println(cat_3.name + " " + cat_3.age + " " + cat_3.color);
        //снова кот по умолчанию
        Cat cat = new Cat();
        System.out.println(cat.getName() + " " + cat.getAge() + " " + cat.getColor());
        //если name, age, color в классе Cat имеют модификатор private, то используем
        //функции getName, getAge, getColor
        //Эти функции помечены, как public, поэтому мы можем воспользоваться ими
        //Если бы они были private, то получили бы ошибку
        cat.setColor("white"); //меняем цвет кота на белый
        System.out.println(cat.getName() + " " + cat.getAge() + " " + cat.getColor() + " " + Cat.getSleephours());
        //print сверху выведет: Barsik 5 white
        Cat cat34 = new Cat("Myrka", 7, "black");
        System.out.println(Cat.getSleephours()); //получаем количество часов сна
        //                                         c помощью метода getSleephours
        /*
        Обратите внимание, что тут мы просто пишем имя класса, а не имя переменной!
        Можно написать и имя переменной и ошибки не будет, но это не имеет никакого смысла
        и это не совсем правильно, так как переменная sleephours одинакова для всех объектов
        (экземпляров класса)
         */

    }
}
